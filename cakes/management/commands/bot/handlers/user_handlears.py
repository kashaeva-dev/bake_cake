import logging.config

from aiogram.dispatcher.filters.state import StatesGroup, State
from asgiref.sync import sync_to_async
from environs import Env

from aiogram import Dispatcher, Bot, types
from aiogram.types import ReplyKeyboardRemove

from cakes.logger_config import logger_config
from cakes.management.commands.bot.keyboards.user_keyboards import (
    get_order_keyword,
    get_just_main_menu_keyboard, get_no_text_keyboard,
)
from cakes.models import (
    Cake,
    Ingredients,
)

logger = logging.getLogger("user_handlers_logger")

logging.config.dictConfig(logger_config)

env = Env()
env.read_env()

bot = Bot(env('TG_BOT_API'), parse_mode=types.ParseMode.HTML)


class OrderFSM(StatesGroup):
    add_text = State()
    add_comment = State()


async def start(message: types.Message):
    await bot.send_message(message.from_user.id,
                           "–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å üéÇ<b>—Ç–æ—Ä—Ç</b> –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –æ–¥–∏–Ω –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ "
                           "–∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚¨á. ",
                           reply_markup=await get_order_keyword(),
                           )


async def web_app_handler(web_app_message):
    logger.info(f"web_app_data: {web_app_message.web_app_data}")
    chat_id = web_app_message.chat.id
    cake_id = web_app_message.web_app_data.data
    cake = await sync_to_async(Cake.objects.get)(id=cake_id)
    await OrderFSM.add_text.set()
    await bot.send_message(chat_id,
                           f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—Ä—Ç <b>{cake.name}</b>.\n\n"
                           f"<b>–í–µ—Å:</b> {cake.weight} –∫–≥.\n\n"
                           f"<b>–¶–µ–Ω–∞:</b> {cake.current_price} —Ä—É–±.\n\n",
                           reply_markup=ReplyKeyboardRemove(),
                           parse_mode='HTML')
    await bot.send_message(chat_id,
                           "‚úè –ú—ã –º–æ–∂–µ–º —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ —Ç–æ—Ä—Ç–µ –ª—é–±—É—é <b>–Ω–∞–¥–ø–∏—Å—å</b>, "
                           "–Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n <b>–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!</b>\n\n"
                           "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–¥–ø–∏—Å—å, –ø—Ä–∏—à–ª–∏—Ç–µ –µ–µ —Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
                           "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–¥–ø–∏—Å–∏ - <b>500 —Ä—É–±.</b>",
                           reply_markup=await get_no_text_keyboard(),
                           parse_mode='HTML')


async def no_text_handler(callback: types.CallbackQuery):
    await OrderFSM.add_comment.set()
    await callback.message.edit_text("üìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ <b>–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b> –∫ –∑–∞–∫–∞–∑—É, ")


async def choose_standard_cake_handler(web_app_message):
    logger.info(f"web_app_data: {web_app_message.web_app_data}")
    cake_id = web_app_message.web_app_data.data.split('_')[-1]
    cake = await sync_to_async(Cake.objects.get)(id=cake_id)
    chat_id = web_app_message.chat.id
    await bot.send_message(chat_id,
                           f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—Ä—Ç <b>{cake.name}</b>.\n"
                           f"<b>–í–µ—Å:</b> {cake.weight} –∫–≥.\n"
                           f"<b>–¶–µ–Ω–∞:</b> {cake.current_price} —Ä—É–±.\n",
                           reply_markup=ReplyKeyboardRemove(),
                           parse_mode='HTML')
    await bot.send_message(chat_id,
                           f"‚úè –ú—ã –º–æ–∂–µ–º —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ —Ç–æ—Ä—Ç–µ –ª—é–±—É—é <b>–Ω–∞–¥–ø–∏—Å—å</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!'",
                           reply_markup=await get_no_text_keyboard(),
                           parse_mode='HTML')


def register_user_handlers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(web_app_handler, content_types='web_app_data')
    # dp.register_message_handler(web_app_handler, lambda web_app_data: web_app_data.web_app_data.data.startswith('cake'))

